Problem - Write a code in java for given a rod of length n inches and an array of prices that includes prices of 
          all pieces of size smaller than n. Determine the maximum value obtainable by cutting up the rod and 
          selling the pieces.
          
          
Code:

import java.io.*;
class Main {

	static int cutRod(int price[], int index, int n)
	{
		if (index == 0) {
			return n * price[0];
		}
		
		int notCut = cutRod(price, index - 1, n);
		int cut = Integer.MIN_VALUE;
		int rod_length = index + 1;

		if (rod_length <= n)
			cut = price[index]
				+ cutRod(price, index, n - rod_length);

		return Math.max(notCut, cut);
	}

	
	public static void main(String args[])
	{
		int arr[] = { 1, 5, 8, 9, 10, 17, 17, 20 };
		int size = arr.length;
		System.out.println("Maximum Obtainable Value is "
						+ cutRod(arr, size - 1, size));
	}
}


Input:
{ 1, 5, 8, 9, 10, 17, 17, 20 }


Output:
Maximum Obtainable Value is 22


Explanation - In this challenge we are generating all configurations of different pieces and finding the highest-priced configuration.
              This solution is exponential in terms of time complexity.This possesses both important properties of a Dynamic Programming
              (DP) Problem and can efficiently be solved using Dynamic Programming.
              
              We can get the best price by making a cut at different positions and comparing the values obtained after a cut. We can
              recursively call the same function for a piece obtained after a cut.
              
              Let cutRod(n) be the required (best possible price) value for a rod of length n. cutRod(n) can be written as follows.
              cutRod(n) = max(price[i] + cutRod(n-i-1)) for all i in {0, 1 .. n-1}
              
              So,if the length of the rod is 8 and the values of different pieces are given 1   2   3   4   5   6   7   8   , then the
              maximumobtainable value is 22 by cutting in two pieces of lengths 2 and 6. 
              
