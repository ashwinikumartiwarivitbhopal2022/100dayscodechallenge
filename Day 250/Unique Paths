Problem - There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
          The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either
          down or right at any point in time.

          Given the two integers m and n, return the number of possible unique paths that the robot can take to reach 
          the bottom-right corner.
          
          The test cases are generated so that the answer will be less than or equal to 2 * 10^9.


Code:
class Solution {
    public int uniquePaths(int m, int n) {
        // Create a 2D DP array filled with zeros
        int[][] dp = new int[m][n];
        
        // Initialize the rightmost column and bottom row to 1
        for (int i = 0; i < m; i++) {
            dp[i][n-1] = 1;
        }
        for (int j = 0; j < n; j++) {
            dp[m-1][j] = 1;
        }
        
        // Fill in the DP array bottom-up
        for (int i = m - 2; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                dp[i][j] = dp[i+1][j] + dp[i][j+1];
            }
        }
        
        // Return the result stored in the top-left corner
        return dp[0][0];
    }
}

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
