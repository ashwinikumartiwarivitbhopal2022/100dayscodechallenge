Problem - There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph,
          where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected
          edge between node u and node v. The graph has the following properties:

          There are no self-edges (graph[u] does not contain u).
          There are no parallel edges (graph[u] does not contain duplicate values).
          If v is in graph[u], then u is in graph[v] (the graph is undirected).
          The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
          
          
Code:
import java.util.ArrayDeque;
import java.util.Queue;

class Solution {
    public boolean isBipartite(int[][] gr) {
        int n = gr.length;
        int[] colour = new int[n];

        for (int node = 0; node < n; node++) {
            if (colour[node] != 0) {
                continue;
            }

            Queue<Integer> q = new ArrayDeque<>();
            q.add(node);
            colour[node] = 1;

            while (!q.isEmpty()) {
                int cur = q.poll();

                for (int ne : gr[cur]) {
                    if (colour[ne] == 0) {
                        colour[ne] = -colour[cur];
                        q.add(ne);
                    } else if (colour[ne] != -colour[cur]) {
                        return false;
                    }
                }
            }
        }

        return true;
    }
}


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one
and a node in the other.


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.
