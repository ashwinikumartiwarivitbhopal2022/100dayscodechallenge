Problem - Given a wooden stick of length n units. The stick is labelled from 0 to n.

          Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.

          You should perform the cuts in order, you can change the order of the cuts as you wish.

          The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs
          of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of 
          their lengths is the length of the stick before the cut). Please refer to the first example 
          for a better explanation.

          Return the minimum total cost of the cuts.





Code:
class Solution {
    int[][] dp;
    
    int solve(int start_stick, int end_stick, int[] cuts, int left, int right) {
        if (left > right) return 0;

        if (dp[left][right] != -1) return dp[left][right];

        int cost = Integer.MAX_VALUE;

        for (int i = left; i <= right; i++) {
            int left_cost = solve(start_stick, cuts[i], cuts, left, i - 1);
            int right_cost = solve(cuts[i], end_stick, cuts, i + 1, right);
            int curr_cost = (end_stick - start_stick) + left_cost + right_cost;
            cost = Math.min(cost, curr_cost);
        }

        return dp[left][right] = cost;
    }
    
    int minCost(int n, int[] cuts) {
        dp = new int[cuts.length][cuts.length];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        
        Arrays.sort(cuts);
        return solve(0, n, cuts, 0, cuts.length - 1);
    }
}


Input: n = 7, cuts = [1,3,4,5]
Output: 16
Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:

              The first cut is done to a rod of length 7 so the cost is 7. The second cut is 
              done to a rod of length 6 (i.e. the second part of the first cut), the third is
              done to a rod of length 4 and the last cut is to a rod of length 3. The total 
              cost is 7 + 6 + 4 + 3 = 20.
              
              Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with
              total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).
              
              
Input: n = 9, cuts = [5,6,1,4,2]
Output: 22
Explanation: If you try the given cuts ordering the cost will be 25.
            There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total
            cost = 22 which is the minimum possible.              
