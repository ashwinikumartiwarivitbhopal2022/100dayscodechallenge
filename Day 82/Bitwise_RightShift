Problem - Write a code in java to implement bitwise right shift operation.

Code:
// Java Program to Illustrate Unsigned Right Shift Operator

// Main class
class GFG {

	// main driver method
	public static void main(String args[])
	{

		// x is stored using 32 bit 2's complement form.
		// Binary representation of -1 is all 1s (111..1)
		int x = -1;

		// The value of 'x>>>29' is 00...0111
		System.out.println(x >>> 29);

		// The value of 'x>>>30' is 00...0011
		System.out.println(x >>> 30);

		// The value of 'x>>>31' is 00...0001
		System.out.println(x >>> 31);
	}
}

Output:
7
3
1


Explanation - In this challenge we are implementing Bitwise right shift operation.In Java, the operator ‘>>>’ denotes
              unsigned right shift operator and always fill 0 irrespective of the sign of the number.All integers are
              signed in Java, and it is fine to use >> for negative numbers. The operator ‘>>’ uses the sign bit 
              (leftmost bit) to fill the trailing positions after the shift. If the number is negative, then 1 is used 
              as a filler and if the number is positive, then 0 is used as a filler. For example, if the binary
              representation of a number is 10….100, then right shifting it by 2 using >> will make it 11…….1.
              
              
