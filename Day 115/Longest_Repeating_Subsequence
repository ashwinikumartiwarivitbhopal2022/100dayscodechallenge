Problem - Write a program in java in which given a string, find the length of the longest repeating subsequence, such that the two
          subsequences donâ€™t have same string character at the same position.
          
          
Code:

import java.io.*;
import java.util.*;

class LRS
{
	static int findLongestRepeatingSubSeq(String str)
	{
		int n = str.length();
		int[][] dp = new int[n+1][n+1];
		for (int i=1; i<=n; i++)
		{
			for (int j=1; j<=n; j++)
			{
				if (str.charAt(i-1) == str.charAt(j-1) && i!=j)
					dp[i][j] = 1 + dp[i-1][j-1];		

				else
					dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
			}
		}
		return dp[n][n];
	}
	public static void main (String[] args)
	{
		String str = "aabb";
		System.out.println("The length of the largest subsequence that"
			+" repeats itself is : "+findLongestRepeatingSubSeq(str));
	}
}


Input0:
aabb


Output0:
The length of the largest subsequence that repeats itself is : 2


Input: str = "abc"

Output: 0
There is no repeating subsequence


Explanation - In this challenge we are taking string as input and finding the longest repeating subssequence  by
              Initialize the input string, which is to be checked.
              Initialize the length of string to the variable.
              Create a DP table using 2D matrix and set each element to 0.
              Fill the table if the characters are same and indexes are different.
              Return the values inside the table
              Print the String.

