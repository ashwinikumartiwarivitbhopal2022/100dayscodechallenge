Problem - You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b]
          is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].

          Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return
          its success probability.
          
          If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by 
          at most 1e-5.


Code:
class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        Map<Integer, List<Pair<Integer, Double>>> graph = new HashMap<>();
        int [] edge;
        for(int  i = 0;i< edges.length;i++){
            edge = edges[i];
            graph.computeIfAbsent(edge[0],k->new ArrayList<>()).add(new Pair<>(edge[1],succProb[i]));
            graph.computeIfAbsent(edge[1],k->new ArrayList<>()).add(new Pair<>(edge[0],succProb[i]));
        }
        //System.out.println(graph);
        double [] maxProb = new double[n];
        maxProb[start] = 1.0;
        
        PriorityQueue<Pair<Integer,Double>> pq = new PriorityQueue<>((a,b)->-Double.compare(a.getValue(),b.getValue()));
        pq.add(new Pair<>(start,1.0));
        while (!pq.isEmpty()){
            
            Pair<Integer,Double> curr = pq.remove();
            if(curr.getKey()==end)return curr.getValue();
            for(Pair<Integer,Double> path: graph.getOrDefault(curr.getKey(),new ArrayList<>())){
                if(curr.getValue()* path.getValue()>maxProb[path.getKey()]){
                    maxProb[path.getKey()] = (double)curr.getValue()* path.getValue();
                    pq.add(new Pair<>(path.getKey(), maxProb[path.getKey()]));
                }
            }
        }
        return 0.0;
    }
}

Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.

Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000

Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.

