Program - Write a program in java to Sudoku puzzle by filling the empty cells.


Code:
package myproject;

public class Sudoku {
	  
	public boolean isSafe(int[][] b, int r, int c, int n)  
	{    
	for (int d = 0; d < b.length; d++)  
	{  
	   
	if (b[r][d] == n)   
	{  
	return false;  
	}  
	}  
	  
	for (int r1 = 0; r1 < b.length; r1++)  
	{  
	   
	if (b[r1][c] == n)  
	{  
	return false;  
	}  
	}   
	int sqt = (int)Math.sqrt(b.length);  
	int boxRowSt = r - r % sqt;  
	int boxColSt = c - c % sqt;  
	  
	for (int r1 = boxRowSt; r1 < boxRowSt + sqt; r1++)  
	{  
	for (int d = boxColSt; d < boxColSt + sqt; d++)  
	{   
	if (b[r1][d] == n)  
	{  
	return false;  
	}  
	}  
	}   
	return true;  
	}  
	  
	public boolean solveSudoku(int[][] b, int num)  
	{  
	int r = -1;  
	int c = -1;  
	boolean isVacant = true;  
	for (int i = 0; i < num; i++)  
	{  
	for (int j = 0; j < num; j++)  
	{  
	if (b[i][j] == 0)  
	{  
	r = i;  
	c = j;  
 
	isVacant = false;  
	break;  
	}  
	}  
	  
	if (!isVacant)   
	{  
	break;  
	}  
	}  
  
	if (isVacant)  
	{  
	return true;  
	}  
	for (int no = 1; no <= num; no++)  
	{  
	if (isSafe(b, r, c, no))  
	{  
	b[r][c] = no;  
	if (solveSudoku(b, num))  
	{  
	return true;  
	}  
	else  
	{  
	  
	b[r][c] = 0;  
	}  
	}  
	}  
	return false;  
	}  
	  
	public void display(int[][] b, int n)  
	{    
	for (int i = 0; i < n; i++)  
	{  
	for (int d = 0; d < n; d++)  
	{  
	System.out.print(b[i][d]);  
	System.out.print(" ");  
	}  
	  
	System.out.print("\n");  
	  
	if ((i + 1) % (int)Math.sqrt(n) == 0)  
	{  
	System.out.print("");  
	}  
	}  
	}  
  
	public static void main(String argvs[])  
	{  
   
	int[][] b = new int[][] { { 5, 3, 0, 0, 7, 0, 0, 0, 0 },   
	                          { 6, 0, 0, 1, 9, 5, 0, 0, 0 },   
	                          { 0, 9, 8, 0, 0, 0, 0, 6, 0 },   
	                          { 8, 0, 0, 0, 6, 0, 0, 0, 3 },   
	                          { 4, 0, 0, 8, 0, 3, 0, 0, 1 },   
	                          { 7, 0, 0, 0, 2, 0, 0, 0, 6 },   
	                          { 0, 6, 0, 0, 0, 0, 2, 8, 0 },   
	                          { 0, 0, 0, 4, 1, 9, 0, 0, 5 },   
	                          { 0, 0, 0, 0, 8, 0, 0, 7, 9 }   
	                                     } ;  
	   
	Sudoku obj = new Sudoku();   
	int size = b.length;  
	  
	System.out.println("The grid is: ");  
	for(int i = 0; i < size; i++)  
	{  
	for(int j = 0; j < size; j++)  
	{  
	System.out.print(b[i][j] + " ");    
	}  
	  
	System.out.println();  
	}  
	System.out.println();  
	if (obj.solveSudoku(b, size))  
	{     
	System.out.println("The solution of the grid is: ");  
	obj.display(b, size);  
	}  
	else   
	{  
	System.out.println("There is no solution available.");  
	}  
	}  
	}  

Input:

The grid is: 
5 3 0 0 7 0 0 0 0 
6 0 0 1 9 5 0 0 0 
0 9 8 0 0 0 0 6 0 
8 0 0 0 6 0 0 0 3 
4 0 0 8 0 3 0 0 1 
7 0 0 0 2 0 0 0 6 
0 6 0 0 0 0 2 8 0 
0 0 0 4 1 9 0 0 5 
0 0 0 0 8 0 0 7 9 

Output:
The solution of the grid is: 
5 3 4 6 7 8 9 1 2 
6 7 2 1 9 5 3 4 8 
1 9 8 3 4 2 5 6 7 
8 5 9 7 6 1 4 2 3 
4 2 6 8 5 3 7 9 1 
7 1 3 9 2 4 8 5 6 
9 6 1 5 3 7 2 8 4 
2 8 7 4 1 9 6 3 5 
3 4 5 2 8 6 1 7 9 


Explanation:
A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.
