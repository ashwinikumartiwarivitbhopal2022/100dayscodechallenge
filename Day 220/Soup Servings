Problem - There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:

          Serve 100 ml of soup A and 0 ml of soup B,
          Serve 75 ml of soup A and 25 ml of soup B,
          Serve 50 ml of soup A and 50 ml of soup B, and
          Serve 25 ml of soup A and 75 ml of soup B.
          When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal
          probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once 
          we no longer have some quantity of both types of soup.


Code:
class Solution {
    private HashMap<Pair<Integer, Integer>, Double> memo = new HashMap<>();

    public double soupServings(int N) {
        if (N > 4451) {
            return 1.0;
        }
        N = (N + 24) / 25;

        return dp(N, N);
    }

    private double dp(int a, int b) {
        if (a <= 0 && b <= 0) {
            return 0.5;
        }
        if (a <= 0) {
            return 1.0;
        }
        if (b <= 0) {
            return 0.0;
        }
        Pair<Integer, Integer> key = new Pair<>(a, b);
        if (memo.containsKey(key)) {
            return memo.get(key);
        }
        memo.put(key, 0.25 * (dp(a-4, b) + dp(a-3, b-1) + dp(a-2, b-2) + dp(a-1, b-3)));
        return memo.get(key);
    }
}


Input: n = 50
Output: 0.62500
Explanation: If we choose the first two operations, A will become empty first.
For the third operation, A and B will become empty at the same time.
For the fourth operation, B will become empty first.
So the total probability of A becoming empty first plus half the probability 
that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.


Input: n = 100
Output: 0.71875
