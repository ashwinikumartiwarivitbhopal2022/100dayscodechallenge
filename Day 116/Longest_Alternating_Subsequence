Problem - Write a program in java to implement longest alternating subsequence using dynamic programming approach.


Code:
import java.io.*;

class Main {

	static int zzis(int arr[], int n)
	{
	
		int las[][] = new int[n][2];

		for (int i = 0; i < n; i++)
			las[i][0] = las[i][1] = 1;

		int res = 1; // Initialize result

		for (int i = 1; i < n; i++) {
			for (int j = 0; j < i; j++) {
				if (arr[j] < arr[i]
					&& las[i][0] < las[j][1] + 1)
					las[i][0] = las[j][1] + 1;

				if (arr[j] > arr[i]
					&& las[i][1] < las[j][0] + 1)
					las[i][1] = las[j][0] + 1;
			}
			if (res < Math.max(las[i][0], las[i][1]))
				res = Math.max(las[i][0], las[i][1]);
		}

		return res;
	}

	public static void main(String[] args)
	{
		int arr[] = { 10, 22, 9, 33, 49, 50, 31, 60 };
		int n = arr.length;
		System.out.println("Length of Longest "
						+ "alternating subsequence is "
						+ zzis(arr, n));
	}
}



Input: arr[] = {10, 22, 9, 33, 49, 50, 31, 60}

Output: 6


Explanation: The subsequences {10, 22, 9, 33, 31, 60} or
{10, 22, 9, 49, 31, 60} or {10, 22, 9, 50, 31, 60}
are longest subsequence of length 6
