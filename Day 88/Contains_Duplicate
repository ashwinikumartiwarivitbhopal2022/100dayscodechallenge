Problem:
          You are given an integer array nums and two integers indexDiff and valueDiff.
          Find a pair of indices (i, j) such that:
          i != j,
          abs(i - j) <= indexDiff.
          abs(nums[i] - nums[j]) <= valueDiff, and
          Return true if such pair exists or false otherwise.
          
Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0
Output: true
Explanation: We can choose (i, j) = (0, 3).
             We satisfy the three conditions:
              i != j --> 0 != 3
            abs(i - j) <= indexDiff --> abs(0 - 3) <= 3
            abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0
            
Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3
Output: false
Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.

Constraints:

            2 <= nums.length <= 105
            -109 <= nums[i] <= 109
            1 <= indexDiff <= nums.length
            0 <= valueDiff <= 109
            
Code:
          public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (k < 1 || t < 0) return false;
        Map<Long, Long> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            long remappedNum = (long) nums[i] - Integer.MIN_VALUE;
            long bucket = remappedNum / ((long) t + 1);
            if (map.containsKey(bucket)
                    || (map.containsKey(bucket - 1) && remappedNum - map.get(bucket - 1) <= t)
                        || (map.containsKey(bucket + 1) && map.get(bucket + 1) - remappedNum <= t))
                            return true;
            if (map.entrySet().size() >= k) {
                long lastBucket = ((long) nums[i - k] - Integer.MIN_VALUE) / ((long) t + 1);
                map.remove(lastBucket);
            }
            map.put(bucket, remappedNum);
        }
        return false;
    }
}
