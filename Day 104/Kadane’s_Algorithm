Problem - Write a java progrm to find  the sum of the contiguous subarray within a arr[] with the largest sum.


Code:

import java.io.*;
import java.util.*;

class Kadane {
	
	public static void main(String[] args)
	{
		int[] a = { -2, -3, 4, -1, -2, 1, 5, -3 };
		System.out.println("Maximum contiguous sum is "
						+ maxSubArraySum(a));
	}

	static int maxSubArraySum(int a[])
	{
		int size = a.length;
		int max_so_far = Integer.MIN_VALUE, max_ending_here
											= 0;

		for (int i = 0; i < size; i++) {
			max_ending_here = max_ending_here + a[i];
			if (max_so_far < max_ending_here)
				max_so_far = max_ending_here;
			if (max_ending_here < 0)
				max_ending_here = 0;
		}
		return max_so_far;
	}
}


Input:
{ -2, -3, 4, -1, -2, 1, 5, -3 }
 
Output:
Maximum contiguous sum is 7


Explanation - In this challenge we are implementing Kadane’s algorithm.This  is to maintain a variable max_ending_here that
              stores the maximum sum contiguous subarray ending at current index and a variable max_so_far stores the maximum
              sum of contiguous subarray found so far, Everytime there is a positive-sum value in max_ending_here compare it
              with max_so_far and update max_so_far if it is greater than max_so_far. 
              
              So the main Intuition behind Kadane’s algorithm is:
              
              The subarray with negative sum is discarded by assigning max_ending_here = 0 in code,
              we carry subarray till it gives positive sum.

