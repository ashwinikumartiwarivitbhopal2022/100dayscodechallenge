Problem - Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

          An interleaving of two strings s and t is a configuration where s and t are divided into n and m 
          substrings respectively.


Code:
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1.length() + s2.length() != s3.length()) return false;
        this.s1 = s1;
        this.s2 = s2;
        this.s3 = s3;
        dp = new int[s1.length() + 1][s2.length() + 1];
        return helper(0, 0, 0);
    }

    String s1;
    String s2;
    String s3;
    int[][] dp;

    private boolean helper(int i, int j, int k) {
        boolean isMatch = false;
        // base case
        if(k == s3.length()) return true;
        
        // we don't have to calculate it again, just return result
        if(dp[i][j] != 0) return dp[i][j] == 1;

        // if s1 matches pick s1
        if(i < s1.length() && s1.charAt(i) == s3.charAt(k)) {
            isMatch = isMatch || helper(i + 1, j, k + 1);
        }

        // if s2 matches pick s2
        if(j < s2.length() && s2.charAt(j) == s3.charAt(k)) {
            isMatch = isMatch || helper(i, j + 1, k + 1);
        }

        // memorize the final answer
        dp[i][j] = isMatch ? 1 : -1;

        return isMatch;
    }   
}


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
